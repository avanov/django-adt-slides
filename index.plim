-inherit base.plim


section
    h3 Declarative Programming
    h3 and
    h3 Algebraic Data Types *
    br: br
    h5 Maxim Avanov
    h5: a href="https://maximavanov.com/" maximavanov.com
    br: br: br
    .pull-right: small * Django explained
    .pull-right: small `a href="http://moscowdjango.ru/" 19th Moscow Django Meetup`


section
    h2 Our Goal
    br: ol
        li.fragment &laquo;Outsource&raquo; boilerplate code (concentrate on important).
        li.fragment Check as much as possible and as soon as possible.
        li.fragment Coherence.

section

    h2 1. A story of How & What

section
    h2 How vs. What
    == self.code_block('python', 'constraints/example_py.txt')

section
    h2 How
    == self.code_block('python', 'constraints/how.txt')
    h2 What
    == self.code_block('python', 'constraints/what.txt')

section

    h3 A few reasons to worry about
    br: ul
        li &laquo;What&raquo; is obscured by &laquo;How&raquo;
        li Single Responsibility Principle is violated

section
    h4 If we could get rid of How's once and for all,
    h4 would we miss it?

section
    h2 Constraint programming

section
    h2 Tribute to `a href="http://www.pylonsproject.org/" Pyramid`
    == self.code_block('python', 'constraints/routing_py.txt')

section
    h2 What it actually means
    == self.code_block('python', 'constraints/routing_py_explained.txt')

section
    h2 ...or in other words
    .fragment
        == self.code_block('yaml', 'constraints/dsl.yml')
        == self.code_block('python', 'constraints/routing_py_clean.txt')

section
    h2 2. ADT


section
    h2 OCaml ADT example
    .fragment
        hr
           | Watch a "Caml Trading" talk by Yaron Minsky at `br`
             `a href="http://youtu.be/hKcOkWzj0_s?t=31m6s" http://youtu.be/hKcOkWzj0_s?t=31m6s`

section
    h2 OCaml ADT example
    .fragment == self.code_block('ocaml', 'ocaml_adt/two_types.ml')
    .fragment == self.code_block('ocaml', 'ocaml_adt/instruction.ml')
    .fragment == self.code_block('ocaml', 'ocaml_adt/filter_by_oid.ml')

section
    h3 OCaml ADT example
    == self.code_block('ocaml', 'ocaml_adt/two_types.ml')
    .fragment == self.code_block('ocaml', 'ocaml_adt/third_type.ml')
    .fragment == self.code_block('ocaml', 'ocaml_adt/instruction_updated.ml')
    == self.code_block('ocaml', 'ocaml_adt/filter_by_oid.ml')
    .fragment == self.code_block('text', 'ocaml_adt/filter_by_oid_warning.txt')


section
    h2 2. Trying to reproduce
    hr
    h4 Check as much as possible and as soon as possible
    br: ul
        li.fragment | automatic discovery of missed cases
        li.fragment | preventing redundant cases
        li.fragment | reporting impossible cases


section
    h2 Python ADT `span.fragment data-fragment-index="0" *`
    br: br
    .fragment data-fragment-index="0" | * kind of

section
    h3 Python ADT example
    hr
    h4 Model types
    == self.code_block('python', 'django_adt/models.py')


section
    h3 Python ADT example
    hr
    h4 Types
    == self.code_block('python', 'django_adt/types.py')

section
    h3 Python ADT example
    hr
    h4 Logic
    == self.code_block('python', 'django_adt/logic.py')

section
    h3 Python ADT example
    hr
    h4 Logic (alternate)
    == self.code_block('python', 'django_adt/logic_alt.py')


section
    h2 Use case
    .fragment
        hr
        h4 Multilingual content

section
    h3 Use case
    hr: h4 Define ADT
    == self.code_block('python', 'python_example/types.py')

section
    h3 Use case
    hr: h4 Register Models
    == self.code_block('python', 'python_example/models.py')

section
    h3 Use case
    hr: h4 Process requests
    == self.code_block('python', 'python_example/views.py')

section
    h3 Use case
    hr: h4 Strategy map
    == self.code_block('text', 'python_example/strategy_map.txt')


section
    h3 Consistency check
    br: h4 Adding a new language
    == self.code_block('python', 'python_example/checks/new_language_py.txt')
    .fragment == self.code_block('text', 'python_example/checks/new_language_error.txt')
    .fragment == self.code_block('python', 'python_example/checks/new_language_fix.txt')

section
    h3 Consistency check
    br: h4 Using undefined variant
    == self.code_block('python', 'python_example/types.py')
    == self.code_block('python', 'python_example/checks/undefined_variant_py.txt')
    .fragment == self.code_block('text', 'python_example/checks/undefined_variant_error.txt')

section
    h3 Consistency check
    br: h4 Guard boundaries
    == self.code_block('python', 'python_example/__init__.py')
    .fragment == self.code_block('text', 'python_example/rules_re.txt')


section
    h2 Worth mentioning
    hr
    ul
        li: a href="https://github.com/lihaoyi/macropy" github.com/lihaoyi/macropy
        li: a href="https://github.com/benanhalt/PyAlgebraicDataTypes" github.com/benanhalt/PyAlgebraicDataTypes (cons ADT)
        li: a href="http://youtu.be/nRDC6GtfB4g" &laquo;Say What You Mean&raquo; talk by Ryan Kelly


section
    h2 Thank you
    br
    .fragment
        hr:br: h4 Q & A

section
    h2 Credits
    br
    ul
        li `a href="http://youtu.be/hKcOkWzj0_s" &laquo;Caml Trading&raquo;` talk by Yaron Minsky
        li `a href="http://rhetoric.readthedocs.org/en/latest/" Rhetoric Project`
        li `a href="http://docs.pylonsproject.org/projects/venusian/en/latest/" Venusian Project`
